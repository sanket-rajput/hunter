import java.io.*;
import java.util.*;

class Student {
    String studentId;
    String name;
    String rollNo;
    String studentClass;
    double marks;
    String address;

    public Student(String studentId, String name, String rollNo, String studentClass, double marks, String address) {
        this.studentId = studentId;
        this.name = name;
        this.rollNo = rollNo;
        this.studentClass = studentClass;
        this.marks = marks;
        this.address = address;
    }

    @Override
    public String toString() {
        return studentId + "," + name + "," + rollNo + "," + studentClass + "," + marks + "," + address;
    }

    public static Student fromString(String record) {
        String[] fields = record.split(",");
        return new Student(fields[0], fields[1], fields[2], fields[3], Double.parseDouble(fields[4]), fields[5]);
    }
}

public class StudentDatabase {

    private static final String FILE_NAME = "student_records.txt";

    // i) Create Database
    public static void createDatabase() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME, true))) {
            Scanner scanner = new Scanner(System.in);

            System.out.println("Enter the number of students:");
            int n = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            for (int i = 0; i < n; i++) {
                System.out.println("Enter details for student " + (i + 1) + ":");
                System.out.print("Student ID: ");
                String id = scanner.nextLine();
                System.out.print("Name: ");
                String name = scanner.nextLine();
                System.out.print("Roll No: ");
                String rollNo = scanner.nextLine();
                System.out.print("Class: ");
                String studentClass = scanner.nextLine();
                System.out.print("Marks: ");
                double marks = scanner.nextDouble();
                scanner.nextLine(); // Consume newline
                System.out.print("Address: ");
                String address = scanner.nextLine();

                Student student = new Student(id, name, rollNo, studentClass, marks, address);
                writer.write(student.toString());
                writer.newLine();
            }
            System.out.println("Database created successfully.");
        } catch (IOException e) {
            System.err.println("Error while creating database: " + e.getMessage());
        }
    }

    // ii) Display Database
    public static void displayDatabase() {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String record;
            System.out.println("\nStudent Records:");
            while ((record = reader.readLine()) != null) {
                Student student = Student.fromString(record);
                System.out.println("Student ID: " + student.studentId);
                System.out.println("Name: " + student.name);
                System.out.println("Roll No: " + student.rollNo);
                System.out.println("Class: " + student.studentClass);
                System.out.println("Marks: " + student.marks);
                System.out.println("Address: " + student.address);
                System.out.println("-------------------------");
            }
        } catch (IOException e) {
            System.err.println("Error while displaying database: " + e.getMessage());
        }
    }

    // iii) Clear Records
    public static void clearRecords() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            // Clearing the file by overwriting it
            System.out.println("All records cleared successfully.");
        } catch (IOException e) {
            System.err.println("Error while clearing records: " + e.getMessage());
        }
    }

    // iv) Modify Record
    public static void modifyRecord(String id) {
        List<Student> students = new ArrayList<>();
        boolean recordFound = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String record;
            while ((record = reader.readLine()) != null) {
                Student student = Student.fromString(record);
                if (student.studentId.equals(id)) {
                    recordFound = true;
                    Scanner scanner = new Scanner(System.in);
                    System.out.println("Enter new details for Student ID " + id + ":");
                    System.out.print("Name: ");
                    student.name = scanner.nextLine();
                    System.out.print("Roll No: ");
                    student.rollNo = scanner.nextLine();
                    System.out.print("Class: ");
                    student.studentClass = scanner.nextLine();
                    System.out.print("Marks: ");
                    student.marks = scanner.nextDouble();
                    scanner.nextLine(); // Consume newline
                    System.out.print("Address: ");
                    student.address = scanner.nextLine();
                }
                students.add(student);
            }
        } catch (IOException e) {
            System.err.println("Error while reading records: " + e.getMessage());
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Student student : students) {
                writer.write(student.toString());
                writer.newLine();
            }
            if (recordFound) {
                System.out.println("Record modified successfully.");
            } else {
                System.out.println("Record with Student ID " + id + " not found.");
            }
        } catch (IOException e) {
            System.err.println("Error while modifying records: " + e.getMessage());
        }
    }

    // v) Search Record
    public static void searchRecord(String id) {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String record;
            boolean found = false;
            while ((record = reader.readLine()) != null) {
                Student student = Student.fromString(record);
                if (student.studentId.equals(id)) {
                    System.out.println("Record Found:");
                    System.out.println("Student ID: " + student.studentId);
                    System.out.println("Name: " + student.name);
                    System.out.println("Roll No: " + student.rollNo);
                    System.out.println("Class: " + student.studentClass);
                    System.out.println("Marks: " + student.marks);
                    System.out.println("Address: " + student.address);
                    found = true;
                    break;
                }
            }
            if (!found) {
                System.out.println("No record found with Student ID " + id);
            }
        } catch (IOException e) {
            System.err.println("Error while searching records: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\nStudent Records Database:");
            System.out.println("1. Create Database");
            System.out.println("2. Display Database");
            System.out.println("3. Clear Records");
            System.out.println("4. Modify Record");
            System.out.println("5. Search Record");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    createDatabase();
                    break;
                case 2:
                    displayDatabase();
                    break;
                case 3:
                    clearRecords();
                    break;
                case 4:
                    System.out.print("Enter Student ID to modify: ");
                    String modifyId = scanner.nextLine();
                    modifyRecord(modifyId);
                    break;
                case 5:
                    System.out.print("Enter Student ID to search: ");
                    String searchId = scanner.nextLine();
                    searchRecord(searchId);
                    break;
                case 6:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}
